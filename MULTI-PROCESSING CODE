#MULTI-PROCESSING CODE:
import time
import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

np.random.seed(7)

# Function to fit the model
def fit_model(X, Y):
    model = Sequential([
        Dense(12, input_dim=8, activation='relu'),
        Dense(8, activation='relu'),
        Dense(1, activation='sigmoid')
    ])

    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    model.fit(X, Y, epochs=150, batch_size=10, verbose=0)

    y_pred_prob = model.predict(X)
    y_pred = np.round(y_pred_prob).flatten()

    return y_pred

# Start the timer
start_time = time.time()

# Load dataset
dataset = pd.read_csv("/content/diabetes.csv")
dataset.head()

X = dataset.loc[:, ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']].values
Y = dataset.loc[:, 'Outcome'].values

# Fit the model
y_pred = fit_model(X, Y)

# Calculate the execution time
execution_time = time.time() - start_time

accuracy = accuracy_score(Y, y_pred)
precision = precision_score(Y, y_pred)
recall = recall_score(Y, y_pred)
f1 = f1_score(Y, y_pred)

print("Accuracy: %.2f%%" % (accuracy * 100))
print("Execution time: %.2f seconds" % execution_time)
print("Precision: %.2f" % precision)
print("Recall: %.2f" % recall)
print("F1-Score: %.2f" % f1)
